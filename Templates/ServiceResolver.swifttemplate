import Foundation
import Swinject
<%_ let imports = (argument["imports"] as? String)?.split(separator: ",") ?? [] -%>
<%_ for `import` in imports { -%>
import <%= `import` %>
<%_ } -%>

<%- include("AnnotationInject.swift") -%>
<%- include("Partials/Method.swift") -%>
<%- include("Partials/Service.swift") -%>
<%- include("Partials/String.swift") -%>

typealias ServiceResolver = Resolver

/// Defines methods to *safely* access injected dependencies
extension ServiceResolver {
<%_ for service in ServiceProvider(types: types).findAnnotatedServices() { -%>
    <%_ let method = service.factory -%>
    <%_ let parameters = method.parameters.filter(annotated: "provided") -%>

    func registeredService(<%= stringify(parameters: parameters, printing: .definition) %>) -> <%= service.resolvedTypeName %> {
        return resolve(<%= method.returnTypeName %>.self<%= prefixNonEmpty(concatParamNames(of: parameters), with: ", arguments: ") %>)!
    }
<%_ } -%>

<%_ for service in ServiceProvider(types: types).findFactoryServices() { -%>
    <%_ let method = service.factory -%>
    <%_ let parameters = method.parameters.filter(annotated: "provided") -%>

    func registeredService(<%= stringify(parameters: parameters, printing: .definition) %>) -> <%= service.resolvedTypeName %> {
        return resolve(<%= method.returnTypeName %>.self<%= prefixNonEmpty(concatParamNames(of: parameters), with: ", arguments: ") %>)!
    }
<%_ } -%>
}

extension Resolver {
  public func resolve<T, U1>(_ serviceType: T.Type, arguments: U1) -> T? {
    return resolve(serviceType, argument: arguments)
  }
}
